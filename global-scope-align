#!/usr/bin/env python3

import re
import sys
import shutil
import argparse


def align(content: str) -> str:
    lines = content.split("\n")
    prototypes = []
    for i, line in enumerate(lines):
        m = re.match(
            r"^(?P<return_type>\w+)\s+"
            r"(?P<rest>\w+\((\w+ \w+)*\);?)$",
            line
        )
        if m is not None:
            prototypes.append((i, m.group("return_type"), m.group("rest")))

    min_alignment = 1
    for _, return_type, rest in prototypes:
        min_alignment = max(len(return_type) // 4 + 1, min_alignment)


    for i, return_type, rest in prototypes:
        alignment = len(return_type) // 4
        lines[i] = return_type + "\t" * (min_alignment - alignment) + rest
    return "\n".join(lines)


def main():
    arg_parser = argparse.ArgumentParser(
        description="Align C source according to the norm"
    )
    arg_parser.add_argument(
        "-i", "--confirm",
        action="store_true",
        help="Ask confirmation before overwritting any file"
    )
    arg_parser.add_argument(
        "-n", "--no-backup",
        action="store_true",
        help="Do not backup the non aligned file"
    )
    arg_parser.add_argument(
        "filepaths",
        metavar="FILE",
        nargs="*",
        help="File to align, if no file is provided read STDIN"
    )
    args = arg_parser.parse_args()

    if len(args.filepaths) == 0:
        content = sys.stdin.read()
        print(align(content))
    else:
        for filepath in args.filepaths:
            if not args.no_backup:
                shutil.copyfile(filepath, filepath + ".orig")
            with open(filepath, "r") as file:
                content = file.read()
            if args.confirm:
                result = input("Are you sure you want to overwrite {}?[y/N]".format(filepath))
                if result != "y":
                    continue
            print("Writting to {}".format(filepath))
            with open(filepath, "w") as file:
                file.write(align(content))


if __name__ == "__main__":
    main()
